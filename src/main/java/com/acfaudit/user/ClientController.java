package com.acfaudit.user;

import com.acfaudit.dto.ClientResponse;
import com.acfaudit.dto.CreateClient;
import com.acfaudit.folder.FolderRepository;
import com.acfaudit.model.Client;
import com.acfaudit.model.Collaborater;
import com.acfaudit.model.Folder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/client") // This means URL's start with /demo (after Application path)
public class ClientController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @Autowired
    private FolderRepository folderRepository;

    @Autowired
    private CollaboraterRepository collaboraterRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody CreateClient createClient) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Client client = new Client();

        Folder f = new Folder();
        f = folderRepository.save(f);
        //System.out.println(f);

        // TODO : this collaborater should be current connected collaborater when session and authentification is ok
        //Collaborater collaborater = new Collaborater();
        //collaborater = collaboraterRepository.save(collaborater);
        Collaborater collaborater = collaboraterRepository.findById(1).get();
        //System.out.println(collaborater);

/*
        System.out.println("##########");
        System.out.println("1er affichage de la liste de collaborateurs pour ce client :");
        List<Collaborater> cL = client.getCollaboraterList();
        for (Collaborater c : cL
             ) {
            System.out.println(c.toString());
        }
        cL.add(collaborater);
        System.out.println("2eme affichage de la liste de collaborateurs pour ce client :");

        for (Collaborater c : cL
        ) {
            System.out.println(c.toString());
        }
        System.out.println("##########");
*/

        // TODO : modify this with getter and setter
        List<Collaborater> cL = new ArrayList<Collaborater>();
        cL.add(collaborater);

        client.setClientFirstName(createClient.getFirstName());
        client.setClientSurName(createClient.getSurName());
        client.setClientEmail(createClient.getEmail());
        client.setFolder(f);
        client.setCollaboraterList(cL);
        //n.setFolder(folderRepository.findBy);
        clientRepository.save(client);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody List<ClientResponse> getAllClients() {
        // This returns a JSON or XML with the clients;

        List<ClientResponse> clientResponseList = new ArrayList<ClientResponse>();
        Iterable<Client> clientIterable = clientRepository.findAll();

       for (Client cl : clientIterable) {
            ClientResponse clientResponse = new ClientResponse();
            clientResponse.setId(cl.getId());
            clientResponse.setFirstName(cl.getClientFirstName());
            clientResponse.setSurName(cl.getClientSurName());
            clientResponse.setEmail(cl.getClientEmail());
            clientResponse.setFolder(cl.getFolder().getId());
            clientResponseList.add(clientResponse);
        }
        return clientResponseList;
    }
}
